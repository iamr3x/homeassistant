#!/bin/bash

# Home Assistant Docker Setup Script
# ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö setup ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£

set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

check_dependencies() {
    print_status "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö dependencies..."

    if ! command -v docker &> /dev/null; then
        print_error "Docker ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á"
        exit 1
    fi

    if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
        print_error "Docker Compose ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á"
        exit 1
    fi

    print_success "Dependencies ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
}

create_directories() {
    print_status "‡∏™‡∏£‡πâ‡∏≤‡∏á directories..."

    mkdir -p config media
    mkdir -p mosquitto/{config,data,log}
    mkdir -p grafana/{dashboards,datasources}

    print_success "‡∏™‡∏£‡πâ‡∏≤‡∏á directories ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢"
}

setup_permissions() {
    print_status "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ permissions..."

    # Home Assistant ‡πÉ‡∏ä‡πâ UID 1000
    sudo chown -R 1000:1000 config media 2>/dev/null || {
        print_warning "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô owner ‡πÑ‡∏î‡πâ (‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ sudo)"
    }

    # Mosquitto directories
    chmod -R 755 mosquitto/

    print_success "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ permissions ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢"
}

setup_environment() {
    if [ ! -f .env ]; then
        print_status "‡∏™‡∏£‡πâ‡∏≤‡∏á .env file..."
        cp .env.example .env
        print_warning "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç .env file ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
        print_warning "nano .env"
    else
        print_success ".env file ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"
    fi
}

create_mosquitto_users() {
    print_status "‡∏™‡∏£‡πâ‡∏≤‡∏á MQTT users..."

    if [ ! -f mosquitto/config/password_file ]; then
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á mosquitto user
        echo "homeassistant:homeassistant" > mosquitto/config/password_file

        # Hash passwords (‡∏ñ‡πâ‡∏≤ mosquitto_passwd ‡∏°‡∏µ)
        if command -v mosquitto_passwd &> /dev/null; then
            mosquitto_passwd -U mosquitto/config/password_file
        else
            print_warning "mosquitto_passwd ‡πÑ‡∏°‡πà‡∏û‡∏ö - password ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å hash"
        fi

        print_success "‡∏™‡∏£‡πâ‡∏≤‡∏á MQTT users ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢"
    else
        print_success "MQTT users ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"
    fi
}

start_services() {
    print_status "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô services..."

    if docker compose version &> /dev/null; then
        docker compose up -d
    else
        docker-compose up -d
    fi

    print_success "Services ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß"
    print_status "‡∏£‡∏≠ Home Assistant ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô..."

    # ‡∏£‡∏≠ Home Assistant ready
    timeout=120
    counter=0

    while [ $counter -lt $timeout ]; do
        if curl -s http://localhost:8123 > /dev/null 2>&1; then
            print_success "Home Assistant ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!"
            break
        fi

        echo -n "."
        sleep 2
        counter=$((counter + 2))
    done

    if [ $counter -ge $timeout ]; then
        print_warning "Home Assistant ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö logs: docker compose logs homeassistant"
    fi
}

show_info() {
    echo ""
    print_success "üéâ Setup ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!"
    echo ""
    echo "üìç Access URLs:"
    echo "   Home Assistant: http://localhost:8123"
    echo "   Grafana:        http://localhost:3000"
    echo "   MQTT:           localhost:1883"
    echo ""
    echo "üîß Useful Commands:"
    echo "   docker compose logs -f homeassistant  # ‡∏î‡∏π logs"
    echo "   docker compose restart homeassistant  # restart"
    echo "   docker compose down                   # stop ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
    echo ""
    echo "üìù Next Steps:"
    echo "   1. ‡πÄ‡∏õ‡∏¥‡∏î http://localhost:8123 ‡πÄ‡∏û‡∏∑‡πà‡∏≠ setup Home Assistant"
    echo "   2. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç config/configuration.yaml ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£"
    echo "   3. ‡πÄ‡∏û‡∏¥‡πà‡∏° devices ‡πÅ‡∏•‡∏∞ automations"
    echo ""
}

backup_data() {
    print_status "‡∏™‡∏£‡πâ‡∏≤‡∏á backup..."

    DATE=$(date +%Y%m%d_%H%M%S)
    BACKUP_FILE="backup_homeassistant_$DATE.tar.gz"

    tar -czf "$BACKUP_FILE" config/ mosquitto/data/ grafana/ .env 2>/dev/null || true

    print_success "Backup ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢: $BACKUP_FILE"
}

show_status() {
    echo ""
    print_status "Service Status:"

    if docker compose version &> /dev/null; then
        docker compose ps
    else
        docker-compose ps
    fi

    echo ""
    print_status "Resource Usage:"
    docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}"
}

case "${1:-setup}" in
    "setup")
        print_status "üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏° setup Home Assistant..."
        check_dependencies
        create_directories
        setup_environment
        setup_permissions
        create_mosquitto_users
        start_services
        show_info
        ;;
    "start")
        print_status "üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏° services..."
        docker compose up -d
        show_status
        ;;
    "stop")
        print_status "‚èπÔ∏è  ‡∏´‡∏¢‡∏∏‡∏î services..."
        docker compose down
        ;;
    "restart")
        print_status "üîÑ restart services..."
        docker compose restart
        show_status
        ;;
    "backup")
        backup_data
        ;;
    "status")
        show_status
        ;;
    "logs")
        SERVICE=${2:-homeassistant}
        docker compose logs -f $SERVICE
        ;;
    "update")
        print_status "üîÑ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó images..."
        docker compose pull
        docker compose up -d
        docker image prune -f
        print_success "‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢"
        ;;
    *)
        echo "Usage: $0 {setup|start|stop|restart|backup|status|logs|update}"
        echo ""
        echo "Commands:"
        echo "  setup   - Initial setup (default)"
        echo "  start   - Start all services"
        echo "  stop    - Stop all services"
        echo "  restart - Restart all services"
        echo "  backup  - Create backup"
        echo "  status  - Show service status"
        echo "  logs    - Show logs (add service name as 2nd arg)"
        echo "  update  - Update Docker images"
        exit 1
        ;;
esac
